"""Adding ARN column and latest_revision_hash to item table

Revision ID: bfb550a500ab
Revises: ae5c0a6aebb3
Create Date: 2016-06-23 21:16:35.951815

"""

# revision identifiers, used by Alembic.
revision = 'bfb550a500ab'
down_revision = 'ae5c0a6aebb3'

from alembic import op
import sqlalchemy as sa
import datetime
from sqlalchemy.dialects.postgresql import JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session as BaseSession, relationship, deferred
import hashlib
import json


Session = sessionmaker()
Base = declarative_base()


class Item(Base):
    __tablename__ = 'item'
    id = sa.Column(sa.Integer, primary_key=True)
    arn = sa.Column(sa.Text(), nullable=True, index=True, unique=True)
    latest_revision_id = sa.Column(sa.Integer, nullable=True)
    latest_revision_hash = sa.Column(sa.String(32), index=True)
    revisions = relationship("ItemRevision", backref="item", cascade="all, delete, delete-orphan", order_by="desc(ItemRevision.date_created)", lazy="dynamic")


class ItemRevision(Base):
    """
    Every new configuration for an item is saved in a new ItemRevision.
    """
    __tablename__ = "itemrevision"
    id = sa.Column(sa.Integer, primary_key=True)
    active = sa.Column(sa.Boolean())
    config = deferred(sa.Column(JSON))
    item_id = sa.Column(sa.Integer, sa.ForeignKey("item.id"), nullable=False)
    date_created = sa.Column(sa.DateTime(), default=datetime.datetime.utcnow, nullable=False, index=True)


def retrieve_arn(config):
    """
    See issue #374. SM does not currently store ARNs in a consistent place.

    :param config: itemrevision config dict
    :return: ARN, if we can find it
    """
    if config.get('arn'):
        return config.get('arn')

    if config.get('Arn'):
        return config.get('Arn')

    if config.get('CertificateArn'):
        return config.get('CertificateArn')

    if config.get('group', {}).get('arn'):
        return config.get('group', {}).get('arn')

    if config.get('role', {}).get('arn'):
        return config.get('role', {}).get('arn')

    if config.get('user', {}).get('arn'):
        return config.get('user', {}).get('arn')

    return None


def upgrade():
    bind = op.get_bind()
    session = Session(bind=bind)

    ### commands auto generated by Alembic - please adjust! ###
    op.add_column('item', sa.Column('arn', sa.Text(), nullable=True))
    op.add_column('item', sa.Column('latest_revision_hash', sa.String(32), nullable=True))
    op.create_index('ix_item_arn', 'item', ['arn'], unique=True)
    op.create_index('ix_item_name', 'item', ['name'], unique=False)
    op.create_index('ix_item_hash', 'item', ['latest_revision_hash'], unique=False)
    ### end Alembic commands ###

    query = session.query(Item) \
        .join((ItemRevision, Item.latest_revision_id == ItemRevision.id)) \
        .filter(ItemRevision.active == True)

    for item in query.all():
        revision = item.revisions.first()
        arn = retrieve_arn(revision.config)
        if arn and u'arn:aws:iam::aws:policy' not in arn:
            item.arn = arn

        item_str = json.dumps(revision.config, sort_keys=True)
        item_hash = hashlib.md5(item_str).hexdigest()
        item.latest_revision_hash = item_hash

    session.commit()


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_item_name', table_name='item')
    op.drop_index('ix_item_arn', table_name='item')
    op.drop_index('ix_item_hash', table_name='item')
    op.drop_column('item', 'arn')
    op.drop_column('item', 'latest_revision_hash')
    ### end Alembic commands ###